

# This file was *autogenerated* from the file normalbundle.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3); _sage_const_200 = Integer(200); _sage_const_7 = Integer(7); _sage_const_20 = Integer(20); _sage_const_19 = Integer(19); _sage_const_18 = Integer(18); _sage_const_17 = Integer(17); _sage_const_4 = Integer(4); _sage_const_16 = Integer(16); _sage_const_5 = Integer(5); _sage_const_15 = Integer(15); _sage_const_8 = Integer(8); _sage_const_12 = Integer(12)
import random
import time

F = QQ
R = F['x, y']; (x, y,) = R._first_ngens(2)
  
def check_for_this_curve(curve, k=_sage_const_2 ):
    r = len(curve)-_sage_const_1 
    d = curve[_sage_const_0 ].degree()
    derivatives = matrix([[f.derivative(x,i,y,k-i) for i in range(k+_sage_const_1 )] for f in curve])

    #Check for degenerate behavior
    minors = derivatives.minors(k+_sage_const_1 )
    I = R.ideal(minors)
    J = R.ideal(x,y)
    if not I.radical() == J:
        print('The curve has the wrong osculating behaviour')
        return(-_sage_const_1 )

    p = ((k+_sage_const_1 )*(d-k))//(r-k) #Expected small degree of the relation 
    a = (r-k) - (((k+_sage_const_1 )*(d-k))%(r-k)) #Expected number of small degree relations

    def compute_defect(derivatives,s):
        Q = []
        for l in range(k+_sage_const_1 ):
            for m in range(d-k+s+_sage_const_1 ):
                row = []
                for j in range(r+_sage_const_1 ):
                    for i in range(s+_sage_const_1 ):
                        row.append(F(derivatives[j][l].coefficient({x:m-i,y:d-k-m+i})))
                Q.append(list(row))
        Q = matrix(Q)
        K = Q.right_kernel().basis()
        
        relations=[]
        for v in K:
            l=[]
            index=_sage_const_0 
            for j in range(r+_sage_const_1 ):
                f = _sage_const_0 
                for i in range(s+_sage_const_1 ):
                    f = f + v[index]*x**i*y**(s-i)
                    index=index+_sage_const_1 
                l.append(f)
            relations.append(list(l))
        #print(relations)
        return (Q.ncols() - Q.rank(), list(relations))

    if not compute_defect(derivatives,p-_sage_const_1 )[_sage_const_0 ] == _sage_const_0 :
        print('There is a relation in degree '+str(p-_sage_const_1 )+', which should not happen')
        return(-_sage_const_2 )
    res=compute_defect(derivatives,p)
    if not res[_sage_const_0 ] == a:
        print('There are too many relations in degree',p)
        return(-_sage_const_3 )
    print('BALANCED!')
    return (_sage_const_1 ,res[_sage_const_1 ])

def generate_rand_equations(d,seed=_sage_const_0 ,rang=_sage_const_200 ,size=-_sage_const_1 ):
    if size == -_sage_const_1 :
        size=d+_sage_const_1 
    random.seed(seed)
    f = _sage_const_0 
    indices=list(range(d+_sage_const_1 ))
    random.shuffle(indices)
    for i in indices:
        f = f + random.randint(_sage_const_0 ,rang)*(x**i*y**(d-i))
        if len(f.terms()) >= size:
            break
    return f
#curve = [x^7*y + y^8, x^4*y^4 + x^2*y^6, x*y^7, x^8, x^6*y^2]
#check_for_this_curve(curve)
'''
r=4
for deg in range(2001,2002):
    with open('balanced_ab1','a') as f:
        print("For degree ",deg,file=f)
    i = (deg // 2) - 1
    curve=[x^i*y^(deg-i), x^(deg-2)*y^2 + x^2*y^(deg-2), x^deg,x^(deg-1)*y+x*y^(deg-1), y^(deg)]
    res=check_for_this_curve(curve)
    #print('hi', res)
    if res[0] == 1:
        with open('balanced_ab1','a') as f:
            #print(curve[0],file=f)
            for i in res[1][0]:
                print(i,file=f)
            print('\n',file=f)
    else:
       assert False

for i in range(100):
    curve=[ generate_rand_equations(deg, seed=time.time(),rang=100) for j in range(r+1)]#+ [x^(deg-2)*y^2 + x^2*y^(deg-2),x^deg,x^(deg-1)*y+x*y^(deg-1),y^(deg)] #[generate_rand_equations(deg, seed=time.time(),rang=1,size=1) for j in range(r-1)]
    res=check_for_this_curve(curve)
    if res == 1:
        with open('balanced','a') as f:
            print(curve,'\n',file=f)
        #deg=deg+1
        #continue
    elif res == -1:
        with open('degenerate','a') as f:
            print(curve,'\n',file=f)
    elif res == -2:
        with open('toolow','a') as f:
            print(curve,'\n',file=f)
    elif res == -3:
        with open('toohigh','a') as f:
            print(curve,'\n',file=f)
'''
r=_sage_const_7 
curve = [x**_sage_const_20 ,y**_sage_const_20 ,x*y**_sage_const_19 +y*x**_sage_const_19 ,x**_sage_const_2 *y**_sage_const_18 +y**_sage_const_2 *x**_sage_const_18 ,x**_sage_const_3 *y**_sage_const_17 +y**_sage_const_3 *x**_sage_const_17 ,x**_sage_const_4 *y**_sage_const_16 +y**_sage_const_4 *x**_sage_const_16 ,x**_sage_const_5 *y**_sage_const_15 +y**_sage_const_5 *x**_sage_const_15 ,x**_sage_const_8 *y**_sage_const_12 ]
check_for_this_curve(curve)

